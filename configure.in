dnl Process this file with autoconf to produce a configure script.

AC_PREREQ(2.52)
AC_INIT(libgamin)
AM_CONFIG_HEADER(config.h)
AC_CANONICAL_SYSTEM

GAMIN_MAJOR_VERSION=0
GAMIN_MINOR_VERSION=0
GAMIN_MICRO_VERSION=5
GAMIN_VERSION=$GAMIN_MAJOR_VERSION.$GAMIN_MINOR_VERSION.$GAMIN_MICRO_VERSION$GAMIN_MICRO_VERSION_SUFFIX
GAMIN_VERSION_INFO=`expr $GAMIN_MAJOR_VERSION + $GAMIN_MINOR_VERSION`:$GAMIN_MICRO_VERSION:$GAMIN_MINOR_VERSION

AC_SUBST(GAMIN_MAJOR_VERSION)
AC_SUBST(GAMIN_MINOR_VERSION)
AC_SUBST(GAMIN_MICRO_VERSION)
AC_SUBST(GAMIN_VERSION)
AC_SUBST(GAMIN_VERSION_INFO)

FAM_VERSION_INFO="0:0:0"

AC_SUBST(FAM_VERSION_INFO)

VERSION=${GAMIN_VERSION}

AM_INIT_AUTOMAKE(gamin, $VERSION)

AM_PROG_LIBTOOL

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AC_PROG_INSTALL
AC_PROG_MAKE_SET

dnl for the spec file
RELDATE=`date +'%a %b %e %Y'`
AC_SUBST(RELDATE)

##################################################
# Check for gtk-doc.
##################################################

AC_ARG_WITH(html-dir, [  --with-html-dir=PATH path to installed docs ])

if test "x$with_html_dir" = "x" ; then
  HTML_DIR='${datadir}/gtk-doc/html'
else
  HTML_DIR=$with_html_dir
fi

AC_SUBST(HTML_DIR)

gtk_doc_min_version=1.0
AC_MSG_CHECKING([gtk-doc version >= $gtk_doc_min_version])
if pkg-config --atleast-version=$gtk_doc_min_version gtk-doc; then
  AC_MSG_RESULT(yes)
  GTKDOC=true
else
  AC_MSG_RESULT(no)
  GTKDOC=false
fi

dnl Let people disable the gtk-doc stuff.
AC_ARG_ENABLE(gtk-doc, [  --enable-gtk-doc  Use gtk-doc to build documentation [default=auto]], enable_gtk_doc="$enableval", enable_gtk_doc=auto)

if test x$enable_gtk_doc = xauto ; then
  if test x$GTKDOC = xtrue ; then
    enable_gtk_doc=yes
  else
    enable_gtk_doc=no 
  fi
fi

AM_CONDITIONAL(ENABLE_GTK_DOC, test x$enable_gtk_doc = xyes)

AC_CHECK_FUNCS(usleep setsid getlogin_r)

dnl
dnl Start of pkg-config checks
dnl
PKG_CHECK_MODULES(DAEMON, glib-2.0)
AC_SUBST(DAEMON_CFLAGS)
AC_SUBST(DAEMON_LIBS)

PKG_CHECK_MODULES(LIBGAMIN, glib-2.0)
AC_SUBST(LIBGAMIN_LIBS)
AC_SUBST(LIBGAMIN_CFLAGS)

PKG_CHECK_MODULES(TEST, glib-2.0)
AC_SUBST(TEST_LIBS)
AC_SUBST(TEST_CFLAGS)

dnl AC_CHECK_GTHREAD_SUPPORTED

dnl Turn on the additional warnings last, so -Werror doesn't affect other tests.

AC_ARG_ENABLE(more-warnings,
[  --enable-more-warnings  Maximum compiler warnings],
set_more_warnings="$enableval",[
if test -f $srcdir/CVSVERSION; then
	is_cvs_version=true
	set_more_warnings=yes
else
	set_more_warnings=no
fi
])
AC_MSG_CHECKING(for more warnings, including -Werror)
if test "$GCC" = "yes" -a "$set_more_warnings" != "no"; then
	AC_MSG_RESULT(yes)
	CFLAGS="\
	-Wall \
	-Wchar-subscripts -Wmissing-declarations -Wmissing-prototypes \
	-Wnested-externs \
	-Wsign-compare \
	$CFLAGS"

	for option in -Wsign-promo -Wno-sign-compare; do
		SAVE_CFLAGS="$CFLAGS"
		CFLAGS="$option $CFLAGS"
		AC_MSG_CHECKING([whether gcc understands $option])
		AC_TRY_COMPILE([], [],
			has_option=yes,
			has_option=no,)
		if test $has_option = no; then
			CFLAGS="$SAVE_CFLAGS"
		fi
		AC_MSG_RESULT($has_option)
		unset has_option
		unset SAVE_CFLAGS
	done
	unset option
else
	AC_MSG_RESULT(no)
fi

AC_ARG_ENABLE(debug,
[  --enable-debug  Enable debugging messages],
AC_DEFINE([MARMOT_DEBUG], 1, [Enable debugging messages]),)

AC_ARG_ENABLE(docs,
[  --enable-docs   Build documentation (requires Doxygen)],
[case "${enableval}" in
  yes) build_docs=yes ;;
  no)  build_docs=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-docs) ;;
esac],[build_docs=yes])
AM_CONDITIONAL(BUILD_DOCS, test x$build_docs = xyes)

AC_ARG_ENABLE(kernel,
[  --disable-kernel Use polling regardless of what kernel-level systems are available],
[case "${enableval}" in
  yes) os=${target_os} ;;
  no)  os="BogusOS" ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --disable-kernel) ;;
esac],[os=${target_os}])

dnl check what OS we're on
AM_CONDITIONAL(HAVE_LINUX, test x$os = xlinux-gnu)

if test x$os = xlinux-gnu; then
	AC_DEFINE([HAVE_LINUX],[],[Whether we are using linux or not])
	backend="dnotify"
else
	backend="polling"
fi

AC_ARG_ENABLE(inotify,
[  --enable-inotify Uses inotify as backend],
[case "${enableval}" in
  yes) backend="inotify" ;;
  no) ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-inotify) ;;
esac])

if test x$backend = xinotify; then
    AC_DEFINE(USE_INOTIFY,1,[Use inotify as backend])
fi

dnl check for flavours of varargs macros (test from GLib)
AC_MSG_CHECKING(for ISO C99 varargs macros in C)
AC_TRY_COMPILE([],[
int a(int p1, int p2, int p3);
#define call_a(...) a(1,__VA_ARGS__)
call_a(2,3);
],dbus_have_iso_c_varargs=yes,dbus_have_iso_c_varargs=no)
AC_MSG_RESULT($dbus_have_iso_c_varargs)
                                                                                
AC_MSG_CHECKING(for GNUC varargs macros)
AC_TRY_COMPILE([],[
int a(int p1, int p2, int p3);
#define call_a(params...) a(1,params)
call_a(2,3);
],dbus_have_gnuc_varargs=yes,dbus_have_gnuc_varargs=no)
AC_MSG_RESULT($dbus_have_gnuc_varargs)
                                                                                
dnl Output varargs tests
if test x$dbus_have_iso_c_varargs = xyes; then
    AC_DEFINE(HAVE_ISO_VARARGS,1,[Have ISO C99 varargs macros])
fi
if test x$dbus_have_gnuc_varargs = xyes; then
    AC_DEFINE(HAVE_GNUC_VARARGS,1,[Have GNU-style varargs macros])
fi

dnl Check for various credentials.
AC_MSG_CHECKING(for struct cmsgcred)
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>
],[
struct cmsgcred cred;

cred.cmcred_pid = 0;
],dbus_have_struct_cmsgcred=yes,dbus_have_struct_cmsgcred=no)
AC_MSG_RESULT($dbus_have_struct_cmsgcred)

if test x$dbus_have_struct_cmsgcred = xyes; then
    AC_DEFINE(HAVE_CMSGCRED,1,[Have cmsgcred structure])
fi

#### Abstract sockets

AC_MSG_CHECKING(abstract socket namespace)
AC_LANG_PUSH(C)
AC_RUN_IFELSE([AC_LANG_PROGRAM(
[[
#include <sys/types.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <errno.h>
]],
[[
  int listen_fd;
  struct sockaddr_un addr;
  
  listen_fd = socket (PF_UNIX, SOCK_STREAM, 0);
  
  if (listen_fd < 0)
    {
      fprintf (stderr, "socket() failed: %s\n", strerror (errno));
      exit (1);
    }

  memset (&addr, '\0', sizeof (addr));
  addr.sun_family = AF_UNIX;
  strcpy (addr.sun_path, "X/tmp/dbus-fake-socket-path-used-in-configure-test");
  addr.sun_path[0] = '\0'; /* this is what makes it abstract */
  
  if (bind (listen_fd, (struct sockaddr*) &addr, SUN_LEN (&addr)) < 0)
    {
       fprintf (stderr, "Abstract socket namespace bind() failed: %s\n", 
                strerror (errno));
       exit (1);
    }
  else 
    exit (0);
]])],
              [have_abstract_sockets=yes],
              [have_abstract_sockets=no])
AC_LANG_POP(C)
AC_MSG_RESULT($have_abstract_sockets)

if test x$enable_abstract_sockets = xyes; then
    if test x$have_abstract_sockets = xno; then
	AC_MSG_ERROR([Abstract sockets explicitly required, and support not detected.])
    fi
fi

if test x$enable_abstract_sockets = xno; then
   have_abstract_sockets=no;
fi

if test x$have_abstract_sockets = xyes ; then
   AC_DEFINE_UNQUOTED(HAVE_ABSTRACT_SOCKETS, $abstract_sockets, [Have abstract socket namespace])
fi



dnl ==========================================================================

AC_OUTPUT([
Makefile
lib/Makefile
libgamin/Makefile
server/Makefile
tests/Makefile
gamin.pc
gamin.spec
])

#docs/Makefile
#docs/guide/Makefile

echo "
gamin-$VERSION:
                                                                                
        prefix:                   ${prefix}
        source code location:     ${srcdir}
        compiler:                 ${CC}
                                                                                
	backend:                  ${backend}
	build documentation:      ${build_docs}
"
